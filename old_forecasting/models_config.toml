# Models Configuration File
# This file defines available forecasting models for both forecast_neural.py and forecast_stats.py

# Statistical Models (for forecast_stats.py)

[historic_average]
library = "statsforecast"
class = "HistoricAverage"
display_name = "Historic Average"
description = "Simple average of historical values"

[seasonal_naive]
library = "statsforecast"
class = "SeasonalNaive"
display_name = "Seasonal Naive"
description = "Last seasonal observation as forecast"

[auto_arima]
library = "statsforecast"
class = "AutoARIMA"
display_name = "Auto ARIMA"
description = "Automatic ARIMA model selection"

[auto_ces]
library = "statsforecast"
class = "AutoCES"
display_name = "Auto CES"
description = "Automatic Complex Exponential Smoothing"

[auto_ets]
library = "statsforecast"
class = "AutoETS"
display_name = "Auto ETS"
description = "Automatic Error-Trend-Seasonality model"

[croston]
library = "statsforecast"
class = "CrostonClassic"
display_name = "Croston"
description = "Croston method for intermittent demand"

[dot]
library = "statsforecast"
class = "DynamicOptimizedTheta"
display_name = "Dynamic Optimized Theta"
description = "Dynamic optimized Theta method"

[holt_winters]
library = "statsforecast"
class = "HoltWinters"
display_name = "Holt-Winters"
description = "Holt-Winters exponential smoothing"

[ses]
library = "statsforecast"
class = "SimpleExponentialSmoothing"
display_name = "Simple Exponential Smoothing"
description = "Simple exponential smoothing with alpha=0.1"

[theta]
library = "statsforecast"
class = "Theta"
display_name = "Theta"
description = "Theta method for forecasting"

# Neural Models (for forecast_neural.py)
# Models are optimized using Optuna with custom configuration functions

[auto_deepar]
library = "neuralforecast"
class = "AutoDeepAR"
display_name = "Auto DeepAR"
description = "Automatic hyperparameter optimization for DeepAR with LSTM encoder-decoder"

[auto_nbeats]
library = "neuralforecast"
class = "AutoNBEATS"
display_name = "Auto N-BEATS"
description = "Automatic hyperparameter optimization for N-BEATS neural network"

[auto_nhits]
library = "neuralforecast"
class = "AutoNHITS"
display_name = "Auto N-HiTS"
description = "Automatic hyperparameter optimization for N-HiTS hierarchical interpolation"

[auto_dlinear]
library = "neuralforecast"
class = "AutoDLinear"
display_name = "Auto DLinear"
description = "Automatic hyperparameter optimization for DLinear decomposition model"

[auto_nlinear]
library = "neuralforecast"
class = "AutoNLinear"
display_name = "Auto NLinear"
description = "Automatic hyperparameter optimization for NLinear normalization model"

[auto_vanilla_transformer]
library = "neuralforecast"
class = "AutoVanillaTransformer"
display_name = "Auto Vanilla Transformer"
description = "Automatic hyperparameter optimization for Vanilla Transformer"

[auto_tide]
library = "neuralforecast"
class = "AutoTiDE"
display_name = "Auto TiDE"
description = "Automatic hyperparameter optimization for TiDE (Time-series Dense Encoder)"

[auto_kan]
library = "neuralforecast"
class = "AutoKAN"
display_name = "Auto KAN"
description = "Automatic hyperparameter optimization for Kolmogorov-Arnold Networks"

# Note: AutoLSTM temporarily disabled due to tensor dimension mismatch issues
# [auto_lstm]
# library = "neuralforecast"
# class = "AutoLSTM"
# display_name = "Auto LSTM"
# description = "Automatic hyperparameter optimization for LSTM encoder-decoder"