Test files:

================================================================================

FILE NAME: tests/test_generate_and_save_results.py

import pytest
import pandas as pd
import sys
import os
import functools

sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

from models.utils import create_simulated_X, create_simulated_y
from models.time_series_model import TimeSeriesModel
from tests.utils import del_test_files, del_files
from models.univariate_local import (
    HoltWintersForecasting,
    MeanForecasting,
    NaiveForecasting,
    SarimaForecasting,
)

from models.time_series_model import TEST_PATH_TIME_SERIES_MODELS_RESULTS
from models.error_metrics import TEST_PATH_ERROR_METRICS_RESULTS


@del_files
def test_error_metrics_frame():
    y = create_simulated_y()
    um = HoltWintersForecasting(y=y, n_forecasting=12, time_frequency="D")
    um.build_divisions()
    um.run()
    um.assess_error()
    error_metrics_frame = um.get_error_metrics_frame()
    assert isinstance(error_metrics_frame, pd.DataFrame)
    assert "model" in list(error_metrics_frame.columns) and "y" in list(
        error_metrics_frame.columns
    )
    assert len(error_metrics_frame.index) == 1
    assert error_metrics_frame.drop(["model", "y"], axis=1).isnull().sum().sum() == 0
    assert all(
        isinstance(e, (int, float))
        for e in error_metrics_frame.drop(["model", "y"], axis=1).iloc[0, :].values
    )


@del_files
def test_saving_time_series_models():
    y = create_simulated_y()
    um = HoltWintersForecasting(y=y, n_forecasting=12, time_frequency="D")
    um.build_divisions()
    um.run()
    um.assess_error()
    um.save(save_error_metrics=False, test_path=True)
    assert os.path.exists(TEST_PATH_TIME_SERIES_MODELS_RESULTS)
    ts_model_frame = pd.read_csv(TEST_PATH_TIME_SERIES_MODELS_RESULTS)
    assert len(ts_model_frame.index) == 1
    assert "y" in list(ts_model_frame.columns) and "model" in list(
        ts_model_frame.columns
    )


@del_files
def test_saving_error_metrics():
    y = create_simulated_y()
    um = HoltWintersForecasting(y=y, n_forecasting=12, time_frequency="D")
    um.build_divisions()
    um.run()
    um.assess_error()
    um.save(save_error_metrics=True, test_path=True)
    assert os.path.exists(TEST_PATH_TIME_SERIES_MODELS_RESULTS)
    error_metrics_frame = pd.read_csv(TEST_PATH_TIME_SERIES_MODELS_RESULTS)
    assert len(error_metrics_frame.index) == 1
    assert "y" in list(error_metrics_frame.columns) and "model" in list(
        error_metrics_frame.columns
    )
    ts_model_frame = pd.read_csv(TEST_PATH_TIME_SERIES_MODELS_RESULTS)
    assert ts_model_frame["id"].iloc[0] == error_metrics_frame["id"].iloc[0]
    assert ts_model_frame["model"].iloc[0] == error_metrics_frame["model"].iloc[0]


================================================================================

FILE NAME: tests/test_time_series_model.py

import pytest
import pandas as pd
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

from models.utils import create_simulated_X, create_simulated_y
from models.time_series_model import TimeSeriesModel


def test_instanciate_time_series_model():
    y = create_simulated_y()
    X = create_simulated_X()
    model = TimeSeriesModel(y, X, step_size=1)
    assert model.dataset.X.shape == model.X.shape
    assert model.dataset.X.equals(X)
    assert model.dataset.y.equals(model.y)
    assert model.step_size == 1
    assert model.forecasting_start_date is None
    assert model.n_forecasting is None
    assert model.intersect_forecasting is False
    assert model.rolling is False
    assert model.error_metrics is not None
    assert model.divisions == {}


def test_create_divisions():
    y = create_simulated_y()
    model = TimeSeriesModel(
        y, filter_start_date="2022-01-01", n_forecasting=12, rolling=False
    )
    model.build_divisions()
    old_idx = -1
    old_last_date = model.divisions[0]["training"].y.index[-2]
    for idx, division in model.divisions.items():
        assert idx > old_idx
        old_idx = idx
        assert (
            division["training"].y.index[-1] + pd.Timedelta(days=1)
            == division["forecasting"].y.index[0]
        )
        assert division["training"].y.index[-1] - pd.Timedelta(days=1) == old_last_date
        old_last_date = division["training"].y.index[-1]


def test_create_divisions_with_bigger_steps():
    y = create_simulated_y()
    model = TimeSeriesModel(
        y, filter_start_date="2022-01-01", n_forecasting=12, rolling=False, step_size=3
    )
    model.build_divisions()
    for idx in model.divisions.keys():
        for i in range(3):
            assert (
                model.divisions[idx]["training"].y.index[-1] + pd.Timedelta(days=i + 1)
                == model.divisions[idx]["forecasting"].y.index[i]
            )
        len(model.divisions[idx]["forecasting"].y.index) == 3


def test_different_n_forecasting():
    y = create_simulated_y(n_periods=1e4)
    for n_forecasting in range(100, 500, 100):
        model = TimeSeriesModel(y, n_forecasting=n_forecasting, rolling=False)
        model.build_divisions()
        assert len(model.divisions) == n_forecasting


def test_create_divisions_with_intersection():
    y = create_simulated_y()
    model = TimeSeriesModel(
        y,
        filter_start_date="2022-01-01",
        n_forecasting=12,
        rolling=False,
        step_size=3,
        intersect_forecasting=True,
    )
    model.build_divisions()
    model.divisions[0]


if __name__ == "__main__":
    test_different_n_forecasting()
    test_create_divisions()
    test_instanciate_time_series_model()


================================================================================

FILE NAME: tests/test_get_data_from_parquet.py

import pytest
import pandas as pd
import sys
import os
import functools

sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

from models.utils import create_simulated_X, create_simulated_y
from models.time_series_model import TimeSeriesModel
from models.dataset import Dataset
from tests.utils import del_test_files
from models.univariate_local import (
    HoltWintersForecasting,
    MeanForecasting,
    NaiveForecasting,
    SarimaForecasting,
)

from models.time_series_model import TEST_PATH_TIME_SERIES_MODELS_RESULTS
from models.error_metrics import TEST_PATH_ERROR_METRICS_RESULTS


UNIVARIATE_LOCAL = [
    HoltWintersForecasting,
    MeanForecasting,
    NaiveForecasting,
    SarimaForecasting,
]


def test_get_data_from_parquet():
    dataset = Dataset.from_parquet(
        y="french_portfolios_25_monthly_size_and_bm_equal_weighted/SMALL LoBM"
    )
    assert isinstance(dataset, Dataset)
    assert dataset.get_y().columns[0] == "SMALL LoBM"
    assert dataset.get_X() is None


def test_get_all_data_from_parquet_table():
    datasets = Dataset.from_parquet_all_from_table(
        y_table="french_portfolios_25_monthly_size_and_bm_equal_weighted",
    )
    assert isinstance(datasets, list)
    table = Dataset.get_table_from_memory(
        "french_portfolios_25_monthly_size_and_bm_equal_weighted"
    )
    for dataset in datasets:
        assert isinstance(dataset, Dataset)
        assert dataset.get_y().columns[0] in list(table.columns)
        assert dataset.get_X() is None
        table.drop(dataset.get_y().columns[0], axis=1, inplace=True)
    if len(table.columns) == 1:
        assert table.columns[0].lower() == "date"
    else:
        assert len(table.columns) == 0


================================================================================

FILE NAME: tests/utils.py

from models.time_series_model import TEST_PATH_TIME_SERIES_MODELS_RESULTS
from models.error_metrics import TEST_PATH_ERROR_METRICS_RESULTS
import os
import functools


def del_test_files():
    if os.path.exists(TEST_PATH_TIME_SERIES_MODELS_RESULTS):
        os.remove(TEST_PATH_TIME_SERIES_MODELS_RESULTS)
    if os.path.exists(TEST_PATH_ERROR_METRICS_RESULTS):
        os.remove(TEST_PATH_ERROR_METRICS_RESULTS)
    return True


def del_files(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            result = func(*args, **kwargs)
            del_test_files()
            return result
        except Exception as e:
            del_test_files()
            raise e

    return wrapper


================================================================================
